name: Build ARM64 Images

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: postal
  FULL_IMAGE_NAME: ghcr.io/${{ github.repository }}/postal

on:
  schedule:
    # Check for new tags every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Specific tag to build'
        required: true
        type: string

jobs:
  check-new-tags:
    if: github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      new-tags: ${{ steps.find-new.outputs.new-tags }}
      has-new: ${{ steps.find-new.outputs.has-new }}
    steps:
      - name: Checkout upstream repository
        uses: actions/checkout@v4
        with:
          repository: postalserver/postal
          fetch-depth: 0

      - name: Find new tags
        id: find-new
        run: |
          # Get latest 10 tags from git
          UPSTREAM_TAGS=$(git tag --sort=-version:refname | head -10 | jq -R -s 'split("\n")[:-1]')
          echo "Upstream tags: $UPSTREAM_TAGS"
          
          # Check which images don't exist in our registry
          NEW_TAGS="["
          FIRST=true
          
          for tag in $(echo "$UPSTREAM_TAGS" | jq -r '.[]'); do
            echo "Checking if image exists: ${{ env.FULL_IMAGE_NAME }}:$tag"
            
            if ! docker manifest inspect ${{ env.FULL_IMAGE_NAME }}:$tag >/dev/null 2>&1; then
              echo "Image $tag does not exist, adding to build list"
              if [ "$FIRST" = true ]; then
                NEW_TAGS="$NEW_TAGS\"$tag\""
                FIRST=false
              else
                NEW_TAGS="$NEW_TAGS,\"$tag\""
              fi
            else
              echo "Image $tag already exists, skipping"
            fi
          done
          
          NEW_TAGS="$NEW_TAGS]"
          echo "new-tags=$NEW_TAGS" >> $GITHUB_OUTPUT
          
          if [ "$(echo "$NEW_TAGS" | jq 'length')" -gt 0 ]; then
            echo "has-new=true" >> $GITHUB_OUTPUT
            echo "Found new tags: $(echo "$NEW_TAGS" | jq -r 'join(", ")')"
          else
            echo "has-new=false" >> $GITHUB_OUTPUT
            echo "No new tags found"
          fi

  build-new-tags:
    needs: check-new-tags
    if: github.event_name != 'workflow_dispatch' && needs.check-new-tags.outputs.has-new == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tag: ${{ fromJson(needs.check-new-tags.outputs.new-tags) }}
    steps:
      - name: Checkout upstream repository at tag
        uses: actions/checkout@v4
        with:
          repository: postalserver/postal
          ref: ${{ matrix.tag }}
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/arm64

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ARM64 image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: |
            ${{ env.FULL_IMAGE_NAME }}:${{ matrix.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.title=Postal ARM64
            org.opencontainers.image.description=ARM64 build of Postal mail server
            org.opencontainers.image.source=https://github.com/postalserver/postal
            org.opencontainers.image.version=${{ matrix.tag }}

      - name: Update latest tag for most recent version
        if: matrix.tag == fromJson(needs.check-new-tags.outputs.new-tags)[0]
        run: |
          docker buildx imagetools create \
            ${{ env.FULL_IMAGE_NAME }}:${{ matrix.tag }} \
            --tag ${{ env.FULL_IMAGE_NAME }}:latest

  build-manual:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout upstream repository at specified tag
        uses: actions/checkout@v4
        with:
          repository: postalserver/postal
          ref: ${{ github.event.inputs.tag }}
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/arm64

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ARM64 image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: |
            ${{ env.FULL_IMAGE_NAME }}:${{ github.event.inputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.title=Postal ARM64
            org.opencontainers.image.description=ARM64 build of Postal mail server
            org.opencontainers.image.source=https://github.com/postalserver/postal
            org.opencontainers.image.version=${{ github.event.inputs.tag }}